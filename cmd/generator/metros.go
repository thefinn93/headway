 package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"
	"strings"
)

const (
	metrosCSVURL             = "https://raw.githubusercontent.com/wosch/bbbike-world/world/etc/cities.csv"
	metrosCSVFieldMetro      = 0
	metrosCSVFieldCountry    = 4
	metrosCSVFieldCoords     = 6
	metrosCSVFieldPopulation = 7
	metrosCSVMaxFields       = metrosCSVFieldPopulation // must be set to highest csv field number
)

func downloadMetros() error {
	path := base + "/metros.go"
	f, err := os.Create(path)
	if err != nil {
		return fmt.Errorf("error writing to %s: %v", path, err)
	}
	defer f.Close()

	res, err := http.Get(metrosCSVURL)
	if err != nil {
		return fmt.Errorf("error getting metros list from %s: %v", metrosCSVURL, err)
	}
	defer res.Body.Close()

	reader := csv.NewReader(res.Body)
	reader.Comma = ':'
	fmt.Fprintln(f, `// Generated by ./cmd/generator
package main

import (
	"github.com/charmbracelet/bubbles/list"

	"github.com/headwaymaps/headway/cmd/headway-build/tasks"
)

var metros = []list.Item{`)
	for {
		row, err := reader.Read()
		if err != nil {
			if err == io.EOF {
				break
			}

			if csvErr, ok := err.(*csv.ParseError); ok {
				if csvErr.Unwrap() == csv.ErrFieldCount {
					continue
				}
			}
			return fmt.Errorf("error parsing metros CSV: %v", err)
		}

		population, err := strconv.ParseInt(row[metrosCSVFieldPopulation], 10, 64)
		if err != nil {
			continue
		}

		if row[metrosCSVFieldCountry] == "" {
			continue
		}

		if row[metrosCSVFieldCoords] == "" {
			continue
		}

		coords := []float64{}
		for _, c := range strings.Split(strings.TrimSpace(row[metrosCSVFieldCoords]), " ") {

			coord, err := strconv.ParseFloat(c, 64)
			if err != nil {
				return fmt.Errorf("unable to parse %s as float: %s", c, err)
			}

			coords = append(coords, coord)
		}

		fmt.Fprintf(f, "\ttasks.Metro{Name: \"%s\", Country: \"%s\", Coords: [4]float64{%f, %f, %f, %f}, Population: %d},\n", row[metrosCSVFieldMetro], row[metrosCSVFieldCountry], coords[0], coords[1], coords[2], coords[3], population)
	}

	fmt.Fprintln(f, "}")
	return nil
}
